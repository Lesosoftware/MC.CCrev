local multishell = multishell
local parentShell = shell
local parentTerm = term.current()
wait = false
TaCCoVersion = "TaCCo OS 1.0"

if multishell then
    multishell.setTitle( multishell.getCurrent(), "TaCCo" )
end

local bExit = false
local sDir = (parentShell and parentShell.dir()) or ""
local sPath = (parentShell and parentShell.path()) or ".:/rom/programs"
local tAliases = (parentShell and parentShell.aliases()) or {}
local tCompletionInfo = (parentShell and parentShell.getCompletionInfo()) or {}
local tProgramStack = {}

local shell = {}
local tEnv = {
	[ "shell" ] = shell,
	[ "multishell" ] = multishell,
}

-- Colours
local promptColour, textColour, bgColour
if term.isColour() then
	promptColour = colours.yellow
	textColour = colours.lime
	bgColour = colours.grey
  headerCol = colors.lightGray
  clockCol = colors.black
else
	promptColour = colours.white
	textColour = colours.white
	bgColour = colours.black
end

local function run( _sCommand, ... )
	local sPath = shell.resolveProgram( _sCommand )
	if sPath ~= nil then
		tProgramStack[#tProgramStack + 1] = sPath
		if multishell then
		    multishell.setTitle( multishell.getCurrent(), fs.getName( sPath ) )
		end
   		local result = os.run( tEnv, sPath, ... )
		tProgramStack[#tProgramStack] = nil
		if multishell then
		    if #tProgramStack > 0 then
    		    multishell.setTitle( multishell.getCurrent(), fs.getName( tProgramStack[#tProgramStack] ) )
    		else
    		    multishell.setTitle( multishell.getCurrent(), "shell" )
    		end
		end
		return result
   	else
    	printError( "No such program                                   " )
    	return false
    end
end

local function tokenise( ... )
    local sLine = table.concat( { ... }, " " )
	local tWords = {}
    local bQuoted = false
    for match in string.gmatch( sLine .. "\"", "(.-)\"" ) do
        if bQuoted then
            table.insert( tWords, match )
        else
            for m in string.gmatch( match, "[^ \t]+" ) do
                table.insert( tWords, m )
            end
        end
        bQuoted = not bQuoted
    end
    return tWords
end

-- Install shell API

string["split"] = function(inputstr, sep)
  if sep == nil then
    sep = "%s"
  end
  local t={} ; i=1
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    t[i] = str
    i = i + 1
  end
  return t
end

shell["run"] = function( ... )
	local tWords = tokenise( ... )
	local sCommand = tWords[1]
	if sCommand then
		return run( sCommand, table.unpack( tWords, 2 ) )
	end
	return false
end

shell["exit"] = function()
    bExit = true
end

shell["dir"] = function()
	return sDir
end

shell["setDir"] = function( _sDir )
  if (string.find(string.lower(shell.resolve( _sDir)), string.lower("OS/system32/TaCCo"))==nil or string.find(string.lower(shell.resolve( _sDir)), string.lower("OS/system32/TaCCo"))=="")==false then
    printError("Zugriff verweigert")
    return false
  end
	sDir = _sDir
  return true
end

shell["path"] = function()
	return sPath
end

shell["setPath"] = function( _sPath )
	sPath = _sPath
end

shell["resolve"] = function( _sPath )
	local sStartChar = string.sub( _sPath, 1, 1 )
	if sStartChar == "/" or sStartChar == "\\" then
		return fs.combine( "", _sPath )
	else
		return fs.combine( sDir, _sPath )
	end
end

shell["resolveProgram"] = function( _sCommand )
	-- Substitute aliases firsts
	if tAliases[ _sCommand ] ~= nil then
		_sCommand = tAliases[ _sCommand ]
	end

    -- If the path is a global path, use it directly
    local sStartChar = string.sub( _sCommand, 1, 1 )
    if sStartChar == "/" or sStartChar == "\\" then
    	local sPath = fs.combine( "", _sCommand )
    	if fs.exists( sPath ) and not fs.isDir( sPath ) then
			return sPath
    	end
		return nil
    end
    
 	-- Otherwise, look on the path variable
    for sPath in string.gmatch(sPath, "[^:]+") do
    	sPath = fs.combine( shell.resolve( sPath ), _sCommand )
    	if fs.exists( sPath ) and not fs.isDir( sPath ) then
			return sPath
    	end
    end
	
	-- Not found
	return nil
end

shell["programs"] = function( _bIncludeHidden )
	local tItems = {}
	
	-- Add programs from the path
    for sPath in string.gmatch(sPath, "[^:]+") do
    	sPath = shell.resolve( sPath )
		if fs.isDir( sPath ) then
			local tList = fs.list( sPath )
            for n=1,#tList do
                local sFile = tList[n]
				if not fs.isDir( fs.combine( sPath, sFile ) ) and
				   (_bIncludeHidden or string.sub( sFile, 1, 1 ) ~= ".") then
					tItems[ sFile ] = true
				end
			end
		end
    end	

	-- Sort and return
	local tItemList = {}
	for sItem, b in pairs( tItems ) do
		table.insert( tItemList, sItem )
	end
	table.sort( tItemList )
	return tItemList
end

local function completeProgram( sLine )
	if #sLine > 0 and string.sub( sLine, 1, 1 ) == "/" then
	    -- Add programs from the root
	    return fs.complete( sLine, "", true, false )

    else
        local tResults = {}
        local tSeen = {}

        -- Add aliases
        for sAlias, sCommand in pairs( tAliases ) do
            if #sAlias > #sLine and string.sub( sAlias, 1, #sLine ) == sLine then
                local sResult = string.sub( sAlias, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Add programs from the path
        local tPrograms = shell.programs()
        for n=1,#tPrograms do
            local sProgram = tPrograms[n]
            if #sProgram > #sLine and string.sub( sProgram, 1, #sLine ) == sLine then
                local sResult = string.sub( sProgram, #sLine + 1 )
                if not tSeen[ sResult ] then
                    table.insert( tResults, sResult )
                    tSeen[ sResult ] = true
                end
            end
        end

        -- Sort and return
        table.sort( tResults )
        return tResults
    end
end

local function completeProgramArgument( sProgram, nArgument, sPart, tPreviousParts )
    local tInfo = tCompletionInfo[ sProgram ]
    if tInfo then
        return tInfo.fnComplete( shell, nArgument, sPart, tPreviousParts )
    end
    return nil
end

shell["complete"] = function( sLine )
    if #sLine > 0 then
        local tWords = tokenise( sLine )
        local nIndex = #tWords
        if string.sub( sLine, #sLine, #sLine ) == " " then
            nIndex = nIndex + 1
        end
        if nIndex == 1 then
            local sBit = tWords[1] or ""
            local sPath = shell.resolveProgram( sBit )
            if tCompletionInfo[ sPath ] then
                return { " " }
            else
                local tResults = completeProgram( sBit )
                for n=1,#tResults do
                    local sResult = tResults[n]
                    local sPath = shell.resolveProgram( sBit .. sResult )
                    if tCompletionInfo[ sPath ] then
                        tResults[n] = sResult .. " "
                    end
                end
                return tResults
            end

        elseif nIndex > 1 then
            local sPath = shell.resolveProgram( tWords[1] )
            local sPart = tWords[nIndex] or ""
            local tPreviousParts = tWords
            tPreviousParts[nIndex] = nil
            return completeProgramArgument( sPath , nIndex - 1, sPart, tPreviousParts )

        end
    end
	return nil
end

shell["completeProgram"] = function( sProgram )
    return completeProgram( sProgram )
end

shell["setCompletionFunction"] = function( sProgram, fnComplete )
    tCompletionInfo[ sProgram ] = {
        fnComplete = fnComplete
    }
end

shell["getCompletionInfo"] = function()
    return tCompletionInfo
end

shell["getRunningProgram"] = function()
	if #tProgramStack > 0 then
		return tProgramStack[#tProgramStack]
	end
	return nil
end

shell["setClockVisibility"] = function(isVisible)
  if isVisible then wait = false
    local x,y = term.getCursorPos()
    term.setCursorBlink(false)
    term.setCursorPos(x,y)
  elseif not isVisible then
    wait = true
  end
end

shell["writeHeader"] = function()
  local oldBGCol = term.getBackgroundColor()
  term.setBackgroundColor(headerCol)
  term.setBackgroundColor( headerCol )
  term.setTextColour( promptColour )
  local x,y = term.getCursorPos()
  term.setCursorPos(1,1)
  write( TaCCoVersion )
  for i=#TaCCoVersion,51 do
    write(" ")
  end
  term.setCursorPos(x,y)
  term.setTextColour( textColour )
  term.setBackgroundColor(oldBGCol)
end

shell["setAlias"] = function( _sCommand, _sProgram )
	tAliases[ _sCommand ] = _sProgram
end

shell["clearAlias"] = function( _sCommand )
	tAliases[ _sCommand ] = nil
end

shell["aliases"] = function()
	-- Copy aliases
	local tCopy = {}
	for sAlias, sCommand in pairs( tAliases ) do
		tCopy[sAlias] = sCommand
	end
	return tCopy
end

if multishell then
    shell["openTab"] = function( ... )
        local tWords = tokenise( ... )
        local sCommand = tWords[1]
        if sCommand then
        	local sPath = shell.resolveProgram( sCommand )
        	if sPath == "rom/programs/shell" then
                return multishell.launch( tEnv, sPath, table.unpack( tWords, 2 ) )
            elseif sPath ~= nil then
                return multishell.launch( tEnv, "rom/programs/shell", sCommand, table.unpack( tWords, 2 ) )
            else
                printError( "No such program" )
            end
        end
    end

    shell["switchTab"] = function( nID )
        multishell.setFocus( nID )
    end
end

local tArgs = { ... }

shell["filterRun"] = function( ... )

  -- "shell x y z"
  -- Run the program specified on the commandline
  local run=nil
  local tArgs={ ... }
  reg.loadDefProgs()
  local safetyProg=Prog
  for k,v in pairs(defProgs) do
    Prog=string.gsub(tArgs[1],"%.",":")
    if string.find(Prog,":") then
      if (string.find(Prog," ")==nil)==false then
        Prog=string.sub(Prog,1,string.find(Prog," ")-1)
      end
      if (string.find(Prog,":")==nil)==false then
        start=string.sub(Prog,string.find(Prog,":")+1,#Prog)
      else
        start=""
      end
      if k==start then
        if v=="Znorm" then
          run=nil
        else
          run=v
        end
      end
    end
  end
  
  if run==nil then
    shell.run( ... )
  else
    shell.run(run.." "..safetyProg)
  end
end

--[[if multishell then
    shell["openFilterTab"] = function( ... )
        local tWords = tokenise( ... )
        local sCommand = tWords[1]
        if sCommand then
        	local sPath = shell.resolveProgram( sCommand )
        	if sPath == "rom/programs/shell" then
                return multishell.launch( tEnv, sPath, table.unpack( tWords, 2 ) )
            elseif sPath ~= nil then
                return multishell.launch( tEnv, "rom/programs/shell", sCommand, table.unpack( tWords, 2 ) )
            else
                printError( "No such program")
            end
        end
    end

    shell["switchTab"] = function( nID )
        multishell.setFocus( nID )
    end
end]]

local function Header()
  if #tArgs > 0 then
    shell.filterRun( tArgs )
  else
    -- "shell"
    -- Print the header
    term.setBackgroundColor( headerCol )
    term.setTextColour( promptColour )
    term.setCursorPos(1,1)
    write( TaCCoVersion )
    for i=#TaCCoVersion,51 do
      write(" ")
    end
    print("")
    term.setTextColour( textColour )

    if setTagDir == nil then
      _G["setTagDir"]=shell.dir()
    end
  end
end

Header()
-- Edit APIs for security

local function loadAPIs()
  _G["renameStats"] = {}
  local newFs = fs
  local fakeList = {}
  
  for k,v in pairs(fs) do
    fakeList[k] = function() return true end
  end
  
  
  for i = 1,99 do
    _G["renameStats"][math.floor(math.random()*99999999+100000000)] = fakeList 
  end
    local right = math.floor(math.random()*99999999+100000000)
    _G["renameStats"][right] = fs
    
    newFs["copy"] = function(source,dest)
      if string.find(string.lower(source),"tacco")==nil and string.find(string.lower(dest),"tacco")==nil and string.find(string.lower(source),"os")==nil and string.find(string.lower(dest),"os")==nil and string.find(string.lower(source),"buddi")==nil and string.find(string.lower(dest),"buddi")==nil and string.find(string.lower(source),"system32")==nil and string.find(string.lower(dest),"system32")==nil then
        _G["renameStats"][right].copy(source,dest)
      else
        printError("Zugriff verweigert")
      end
    end
    
    newFs["move"] = function(source,dest)
      if string.find(string.lower(source),"tacco")==nil and string.find(string.lower(dest),"tacco")==nil and string.find(string.lower(source),"os")==nil and string.find(string.lower(dest),"os")==nil and string.find(string.lower(source),"buddi")==nil and string.find(string.lower(dest),"buddi")==nil and string.find(string.lower(source),"system32")==nil and string.find(string.lower(dest),"system32")==nil then
        _G["renameStats"][right].move(source,dest)
      else
        printError("Zugriff verweigert")
      end
    end
    
    newFs["delete"] = function(path)
      if string.find(string.lower(path),"tacco")==nil and string.find(string.lower(path),"buddi")==nil and string.find(string.lower(path),"os")==nil and string.find(string.lower(path),"system32")==nil then
        _G["renameStats"][right].delete(path)
      else
        printError("Zugriff verweigert")
      end
    end
    
    newFs["makeDir"] = function(path)
      if string.find(string.lower(path),"tacco")==nil and string.find(string.lower(path),"buddi")==nil and string.find(string.lower(path),"os")==nil and string.find(string.lower(path),"system32")==nil then
        _G["renameStats"][right].makeDir(path)
      else
        printError("Zugriff verweigert")
      end
    end
    
    newFs["open"] = function(path,mode)
      if string.find(string.lower(path),"tacco")==nil and string.find(string.lower(path),"buddi")==nil and string.find(string.lower(path),"os")==nil and string.find(string.lower(path),"system32")==nil then
        _G["renameStats"][right].open(path,mode)
      else
        printError("Zugriff verweigert")
      end
    end
    
    
    fs = newFs
  
  local newIo = io
  local fakeList = {}
  
  for k,v in pairs(io) do
    fakeList[k] = function() return true end
  end
  
  for i = 1,99 do
    _G["renameStats"][math.floor(math.random()*999999999+1000000000)] = fakeList 
  end
  
  local right = math.floor(math.random()*999999999+1000000000)
  _G["renameStats"][right] = io
    
  newIo["open"] = function(path,mode)
    if string.find(string.lower(path),"tacco")==nil and string.find(string.lower(path),"buddi")==nil and string.find(string.lower(path),"os")==nil and string.find(string.lower(path),"system32")==nil then
      _G["renameStats"][right].open(path,mode)
    else
      printError("Zugriff verweigert")
    end
  end
  
  io = newIo
end

loadAPIs()
  
    -- Read commands and execute them
local tCommandHistory = {}
TaCCo = function()
  while not bExit do
    term.redirect( parentTerm )
    term.setBackgroundColor( bgColour )
    term.setTextColour( promptColour )
 
    write( _G.setTagDir .. "> " )
    term.setTextColour( textColour )
    oldGray = colors.gray
    oldWhite = colors.white
    colors.gray = colors.blue
    local x,y = term.getCursorPos()
    if y == 19 then shell.writeHeader() end
    local sLine = read( nil, tCommandHistory ,shell.complete )    
    colors.gray = oldGray
    table.insert( tCommandHistory, sLine )
    shell.setClockVisibility(false)
    shell.filterRun(sLine)
    shell.setClockVisibility(true)
  end
end

timer = function()
  while true do
    while not wait do
      local x,y = term.getCursorPos()
      local oldBGCol = term.getBackgroundColor()
      local oldTXTCol = term.getTextColor()
      term.setTextColor(clockCol)
      term.setBackgroundColor(headerCol)
      term.setCursorBlink(false)
      thetime = textutils.formatTime(os.time(),true)
      term.setCursorPos(51-#thetime,1)
      write(thetime)
      term.setBackgroundColor(oldBGCol)
      term.setTextColour(oldTXTCol)
      term.setCursorPos(x,y)
      term.setCursorBlink(true)
      sleep(0)
    end
    sleep(0)
  end
end
  process.interactive("TaCCo OS",TaCCo,"Clock",timer)