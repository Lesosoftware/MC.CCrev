--Lists

network = {}
sides   = {"left","right","front","back","top","bottom"}

--Shortcuts

local function openModem()
  local  openSides,closeSides = {},{}
  
  for _,side in pairs(sides) do
    if peripheral.getType(side) == "modem" then
      if rednet.isOpen(side) then table.insert(openSides,side)
      else rednet.open(side) end
    end
  end
  
  if #openSides == 0 and #closeSides == 0 then return false end
  
  return true
end

local function testType(test,tType,func)
  if type(test) ~= tType then
    error("network."..func.." "..tType.." expected, got "..type(test))
  end
end

--Install Client Network API

network["search"] = function (networkAmount,timeout)
  local networkAmount = networkAmount or 16
  local timeout = timeout or 2
  local networks = {}
  openModem()
  for i = 1,networkAmount do
    rednet.broadcast(tostring(timeout*networkAmount),"request:Network")
    local ID,_ = rednet.receive("request:Network",timeout)
    table.insert(networks,ID)
  end
  return networks
end

network["connect"] = function(routerID,timeout)
  testType(routerID,"number","connect")
  timeout = timeout or 3
  rednet.send(routerID,os.getComputerLabel(),"request:userData")
  local ID,myIP = rednet.receive("request:userData",timeout)
  if not routerID == ID then
    return false
  end
  network["localIP"] = myIP
end

--Install Router Network API

network["host"] = function()
  openModem()
  
  function timer()
    timeout = 0
    while true do
      sleep(1)
      timeout = timeout+1
    end
  end
  
  function userUI()
    while true do
      coroutine.yield()
      term.clear()
      term.setCursorPos(1,1)
      for ID,name in pairs(connectedDevices) do
        print(name," ",ID)
      end
    end
  end
  
  function connect()
    connectedDevices = {}
    connectedDevices["192.168."..os.getComputerID()..".1"] = os.getComputerID()
    while true do
      local count = (count or 1)+1
      local computerID,label = rednet.receive("request:userData")
      print(computerID," ",label)
      formatIP = "192.168."..os.getComputerID().."."..count
      rednet.send(computerID,formatIP,"request:userData")
      connectedDevices[formatIP] = computerID
      coroutine.resume(userUI)
    end
  end
  
  function giveSearchAnswer()
    nAns = {}
    while true do
      local id,noAnswer = rednet.receive("request:Network")
      noAnswer = tonumber(noAnswer) + timeout
      if not nAns[id] or timeout >= nAns[id] then
        rednet.send(id,"_","request:Network")
        nAns[id] = noAnswer
      end
    end
  end
  
  userUI = coroutine.create(userUI)
  function resume() coroutine.resume(userUI) end
  parallel.waitForAll(connect,giveSearchAnswer,resume,timer)
  
end

--End
